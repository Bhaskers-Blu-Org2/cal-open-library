OBJECT Codeunit 139011 Excel Buffer Test
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=Test,INT,All;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=NonRestrictive;
    OnRun=BEGIN
            // [FEATURE] [Excel Buffer]
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      UnknownCellTypeError@1000 : TextConst 'ENU=Unknown cell type %1.';
      SheetNotFoundError@1003 : TextConst 'ENU=Error does not contain the sheet name %1. Actual: %2.';
      FileNotFoundError@1004 : TextConst 'ENU=Error does not contain the file name %1. Actual: %2.';
      FileManagement@1001 : Codeunit 419;
      SheetNameTok@1005 : TextConst 'ENU=Sheet1';
      LibraryUtility@1006 : Codeunit 131000;
      ExcelFile@1007 : File;

    [Test]
    PROCEDURE CloseExcelFileCreatesTheFileTest@2();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempWriteExcelBuffer,'Sheet 1');
      TempWriteExcelBuffer.CloseBook;

      Assert.IsTrue(EXISTS(ExcelFile),'File ' + ExcelFile + ' not found');

      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE DefaultFileHasNoDataTest@1();
    VAR
      TempWriteExcelBuffer@1003 : TEMPORARY Record 370;
      TempReadExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1000 : Text;
      SheetName@1001 : Text[30];
    BEGIN
      SheetName := 'Test Sheet 1';
      ExcelFile := CreateExcelFile(TempWriteExcelBuffer,SheetName);
      TempWriteExcelBuffer.CloseBook;
      ReadSheet(TempReadExcelBuffer,ExcelFile,SheetName);
      TempReadExcelBuffer.CloseBook;

      Assert.IsTrue(TempReadExcelBuffer.ISEMPTY,'Default file is not empty');

      CLEAR(TempWriteExcelBuffer);
      CLEAR(TempReadExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE CreateBookWithUnspecifiedSheetNameTest@28();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
    BEGIN
      ASSERTERROR TempExcelBuffer.CreateBook('','');
    END;

    [Test]
    PROCEDURE OpenFileWithUnspecifiedNameTest@21();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
    BEGIN
      ASSERTERROR TempExcelBuffer.OpenBook('','Sheet1');
    END;

    [Test]
    PROCEDURE OpenFileWhenFileNotFoundTest@35();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      LastError@1001 : Text;
    BEGIN
      ASSERTERROR TempExcelBuffer.OpenBook('File0023123123','Sheet2');

      LastError := GETLASTERRORTEXT;

      Assert.IsTrue(STRPOS(LastError,'File0023123123') <> 0,COPYSTR(STRSUBSTNO(FileNotFoundError,'File0023123123',LastError),1,1024));
    END;

    [Test]
    PROCEDURE OpenSheetWithUnspecifiedNameTest@22();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet1');
      TempExcelBuffer.CloseBook;
      ASSERTERROR TempExcelBuffer.OpenBook(ExcelFile,'');

      CLEAR(TempExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE OpenSheetWhenSheetNotFoundTest@25();
    VAR
      TempExcelBuffer@1001 : TEMPORARY Record 370;
      ExcelFile@1000 : Text;
      LastError@1002 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet1');
      TempExcelBuffer.CloseBook;
      ASSERTERROR TempExcelBuffer.OpenBook(ExcelFile,'Sheet2');

      LastError := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(LastError,'Sheet2') <> 0,COPYSTR(STRSUBSTNO(SheetNotFoundError,'Sheet2',LastError),1,1024));

      CLEAR(TempExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE SelectSheetNameSingleSheetTest@29();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1002 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet 1');
      TempExcelBuffer.CloseBook;
      SheetName := TempExcelBuffer.SelectSheetsName(ExcelFile);
      Assert.AreEqual('Sheet 1',SheetName,'Sheet name is not the expected one.');

      CLEAR(TempExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    [HandlerFunctions(SelectSheetMPH)]
    PROCEDURE SelectSheetNameMultiSheetTest@45();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1002 : Text;
    BEGIN
      PopulateTableWithTextsAndInfo(TempExcelBuffer);
      ExcelFile := DumpDataToExcelFile(TempExcelBuffer,'Sheet 1','');
      TempExcelBuffer.CloseBook;
      SheetName := TempExcelBuffer.SelectSheetsName(ExcelFile);
      Assert.AreNotEqual('Sheet 1',SheetName,'Sheet name is not the expected one.');

      CLEAR(TempExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    [HandlerFunctions(SelectSheetMPH)]
    PROCEDURE CreateMultiSheetFromMultiTablesTest@40();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      TempExcelBuffer1@1003 : TEMPORARY Record 370;
      TempExcelBuffer2@1004 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1002 : Text;
    BEGIN
      // Initialize 3 Excel buffer tables.
      // TempExcelBuffer will be the main excel sheet.
      PopulateTableWithNumbers(TempExcelBuffer);
      PopulateTableWithDates(TempExcelBuffer1);
      PopulateTableWithNumbers(TempExcelBuffer2);

      // Save all 3 buffers to different sheets.
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet 1');

      TempExcelBuffer.WriteSheet('','',USERID);
      TempExcelBuffer.SelectOrAddSheet('Test Sheet numero due');
      TempExcelBuffer.WriteAllToCurrentSheet(TempExcelBuffer1);
      TempExcelBuffer.SelectOrAddSheet('Sheet 3');
      TempExcelBuffer.WriteAllToCurrentSheet(TempExcelBuffer2);
      TempExcelBuffer.CloseBook;

      // Validate
      SheetName := TempExcelBuffer.SelectSheetsName(ExcelFile);
      CLEAR(TempExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);

      Assert.AreEqual('Test Sheet numero due',SheetName,'Sheet name is not the expected one.');
    END;

    [Test]
    PROCEDURE OnlyNumbersPopulatedExcelIsReadTest@6();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
    BEGIN
      PopulateTableWithNumbers(TempWriteExcelBuffer);
      SheetName := 'Test Sheet Number';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE OnlyDatesPopulatedExcelIsReadTest@33();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
    BEGIN
      PopulateTableWithDates(TempWriteExcelBuffer);
      SheetName := 'Test Sheet Dates';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE OnlyTextsPopulatedExcelIsReadTest@34();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
    BEGIN
      PopulateTableWithTexts(TempWriteExcelBuffer);
      SheetName := 'Test Sheet Text';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE OnlyTextsAndInfoPopulatedExcelIsReadTest@37();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
    BEGIN
      PopulateTableWithTextsAndInfo(TempWriteExcelBuffer);
      SheetName := 'Test Sheet Text and Info';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE OnlyMixAndStylePopulatedExcelIsReadTest@12();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
    BEGIN
      PopulateTableWithMixAndStyling(TempWriteExcelBuffer);
      SheetName := 'Test Sheet Mix Style';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE LongUserName@36();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      User@1004 : Record 2000000120;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
      UserName@1003 : Text;
    BEGIN
      PopulateTableWithNumbers(TempWriteExcelBuffer);
      SheetName := 'Test Sheet User Name';
      UserName := PADSTR('',MAXSTRLEN(User."User Name"),'.');
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,UserName);

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      CLEAR(TempWriteExcelBuffer);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE UpdateFilePartialyOverwritesTest@14();
    VAR
      TempWriteExcelBuffer@1002 : TEMPORARY Record 370;
      TempUpdateExcelBuffer@1003 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
      SheetName@1000 : Text[30];
      RowNo@1004 : Integer;
      ColumnNo@1005 : Integer;
      Value@1006 : Decimal;
    BEGIN
      PopulateTableWithNumbers(TempWriteExcelBuffer);
      SheetName := 'Update Test';
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      TempWriteExcelBuffer.FINDLAST;
      Value := 123.567;
      RowNo := TempWriteExcelBuffer."Row No." + 1;
      ColumnNo := TempWriteExcelBuffer."Column No." + 1;
      InsertColumn(TempUpdateExcelBuffer,RowNo,ColumnNo,Value,TempUpdateExcelBuffer."Cell Type"::Number);

      TempUpdateExcelBuffer.UpdateBook(ExcelFile,SheetName);
      TempUpdateExcelBuffer.WriteSheet('','','');
      TempUpdateExcelBuffer.CloseBook;

      CLEAR(TempUpdateExcelBuffer);
      CLEAR(TempWriteExcelBuffer);
      InsertColumn(TempWriteExcelBuffer,RowNo,ColumnNo,Value,TempWriteExcelBuffer."Cell Type"::Number);

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE UpdateFileWithUnspecifiedNameTest@23();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
    BEGIN
      ASSERTERROR TempExcelBuffer.UpdateBook('','Sheet1');
    END;

    [Test]
    PROCEDURE UpdateFileWhenFileNotFoundTest@27();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      LastError@1001 : Text;
    BEGIN
      ASSERTERROR TempExcelBuffer.UpdateBook('File0023123123','Sheet2');

      LastError := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(LastError,'File0023123123') <> 0,COPYSTR(STRSUBSTNO(FileNotFoundError,'File0023123123',LastError),1,1024));
    END;

    [Test]
    PROCEDURE UpdateSheetWithUnspecifiedNameTest@24();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      ExcelFile@1001 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet1');
      TempExcelBuffer.CloseBook;
      ASSERTERROR TempExcelBuffer.UpdateBook(ExcelFile,'');
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE UpdateSheetWhenSheetNotFoundTest@26();
    VAR
      TempExcelBuffer@1001 : TEMPORARY Record 370;
      ExcelFile@1000 : Text;
      LastError@1002 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(TempExcelBuffer,'Sheet1');
      TempExcelBuffer.CloseBook;
      ASSERTERROR TempExcelBuffer.UpdateBook(ExcelFile,'Sheet2');

      LastError := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(LastError,'Sheet2') <> 0,COPYSTR(STRSUBSTNO(SheetNotFoundError,'Sheet2',LastError),1,1024));
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UpdateSheetFromStreamTest@42();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      ExcelStream@1001 : InStream;
      Value@1003 : Variant;
      FileName@1002 : Text;
    BEGIN
      // [SCENARIO] An existing Excel File can be updated using Streams

      // [GIVEN] An Excel File as a Stream
      CreateExcelStream(ExcelStream);

      // [THEN] The file can be updated
      TempExcelBuffer.UpdateBookStream(ExcelStream,SheetNameTok,TRUE);
      TempExcelBuffer.AddColumn('New Value',FALSE,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      TempExcelBuffer.WriteSheet('','','');
      TempExcelBuffer.QuitExcel;
      TempExcelBuffer.UTgetGlobalValue('ExcelFile',Value);
      FileName := FORMAT(Value);

      // Verify
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      TempExcelBuffer.OpenBook(FileName,SheetNameTok);
      TempExcelBuffer.ReadSheet;
      TempExcelBuffer.SETRANGE("Row No.",1);
      TempExcelBuffer.SETRANGE("Column No.",1);
      TempExcelBuffer.FINDSET;
      Assert.AreEqual('New Value',TempExcelBuffer."Cell Value as Text",'Excel file was not updated');

      // Tear Down
      ExcelFile.CLOSE;
    END;

    [Test]
    PROCEDURE EmptyFormulaValueIsNotReadTest@20();
    VAR
      TempWriteExcelBuffer@1006 : TEMPORARY Record 370;
      ExcelFile@1004 : Text;
      SheetName@1003 : Text[30];
    BEGIN
      SheetName := 'Empty Value Formula Test';
      PopulateTableWithNumbers(TempWriteExcelBuffer);
      TempWriteExcelBuffer.AddColumn('SUM(A1,A2)',TRUE,'',TRUE,TRUE,TRUE,'',TempWriteExcelBuffer."Cell Type"::Number);
      ExcelFile := DumpDataToExcelFile(TempWriteExcelBuffer,SheetName,'');

      CLEAR(TempWriteExcelBuffer);
      TempWriteExcelBuffer.FINDLAST;
      TempWriteExcelBuffer.DELETE;

      ValidateExcelFile(TempWriteExcelBuffer,ExcelFile,SheetName);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE ExportFormulaToFilterTest@32();
    VAR
      TempWriteExcelBuffer@1006 : TEMPORARY Record 370;
      HasError@1000 : Boolean;
    BEGIN
      PopulateTableWithNumbers(TempWriteExcelBuffer);
      TempWriteExcelBuffer.AddColumn('1..10000000',TRUE,'',TRUE,TRUE,TRUE,'',TempWriteExcelBuffer."Cell Type"::Number);

      HasError := TempWriteExcelBuffer.ExportBudgetFilterToFormula(TempWriteExcelBuffer);
      Assert.IsFalse(HasError,'The ExportBudgetFilterToFormula failed to export filters');

      CLEAR(TempWriteExcelBuffer);
      TempWriteExcelBuffer.FINDLAST;
      TempWriteExcelBuffer.DELETE;
    END;

    [Test]
    PROCEDURE ConvertDateTimeInOADateToText@13();
    VAR
      ExcelBuffer@1000 : Record 370;
      LocalDateTime@1001 : DateTime;
      ExpectedDateTime@1002 : DateTime;
    BEGIN
      LocalDateTime := ExcelBuffer.ConvertDateTimeDecimalToDateTime(0.91666666666666663);
      ExpectedDateTime := CREATEDATETIME(TODAY,220000T);
      Assert.AreEqual(FORMAT(DT2TIME(ExpectedDateTime)),FORMAT(DT2TIME(LocalDateTime)),'String is not converted correct');
    END;

    [Test]
    PROCEDURE CheckNameValueLookupIsNotEditableUT@30();
    VAR
      NameValueLookupPage@1000 : TestPage 823;
    BEGIN
      // [FEATURE] [UT] [UI] [Name/Value Lookup]
      // [SCENARIO 363552] "Name/Value Lookup" page should be not editable
      NameValueLookupPage.TRAP;
      NameValueLookupPage.OPENNEW;
      Assert.IsFalse(NameValueLookupPage.EDITABLE,'');
    END;

    [Test]
    PROCEDURE UpdateExcelFileWithEmptyValueOfCell@43();
    VAR
      ExcelBuffer@1000 : Record 370;
      ExcelFile@1001 : Text;
    BEGIN
      // [SCENARIO 209190] Value of cell have to be updated if new value is empty ('') if PreserveDataOnUpdate = FALSE

      // [GIVEN] Excel file contains cell with value = 'Some value'
      ExcelBuffer.DELETEALL;
      ExcelBuffer.NewRow;
      PopulateRowWithTexts(ExcelBuffer,1,0);
      ExcelFile := DumpDataToExcelFile(ExcelBuffer,SheetNameTok,'');

      // [GIVEN] Updated excel buffer of cell from step above with value = ''
      ExcelBuffer.FINDLAST;
      ExcelBuffer."Cell Value as Text" := '';
      ExcelBuffer.MODIFY;

      // [WHEN] Update the cell with value = '' (Invoke UpdateBookExcel with PreserveDataOnUpdate = FALSE)
      ExcelBuffer.UpdateBookExcel(ExcelFile,SheetNameTok,FALSE);
      ExcelBuffer.WriteSheet('','','');
      ExcelBuffer.CloseBook;

      // [THEN] Value of cell = ''
      ReadSheet(ExcelBuffer,ExcelFile,SheetNameTok);
      ExcelBuffer.TESTFIELD("Cell Value as Text",'');
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE NotUpdateExcelFileWithEmptyValueOfCell@62();
    VAR
      ExcelBuffer@1000 : Record 370;
      ExcelFile@1001 : Text;
      ExpectedResult@1002 : Text;
    BEGIN
      // [SCENARIO 209190] Value of cell have to not be updated if new value is empty ('') if PreserveDataOnUpdate = TRUE

      // [GIVEN] Excel file contains cell with value = 'Some value'
      ExcelBuffer.DELETEALL;
      ExcelBuffer.NewRow;
      PopulateRowWithTexts(ExcelBuffer,1,0);
      ExcelFile := DumpDataToExcelFile(ExcelBuffer,SheetNameTok,'');

      // [GIVEN] Updated excel buffer of cell from step above with value = ''
      ExcelBuffer.FINDLAST;
      ExpectedResult := ExcelBuffer."Cell Value as Text";
      ExcelBuffer."Cell Value as Text" := '';
      ExcelBuffer.MODIFY;

      // [WHEN] Update the cell with value = '' (Invoke UpdateBookExcel with PreserveDataOnUpdate = TRUE)
      ExcelBuffer.UpdateBookExcel(ExcelFile,SheetNameTok,TRUE);
      ExcelBuffer.WriteSheet('','','');
      ExcelBuffer.CloseBook;

      // [THEN] Value of cell = 'Some value'
      ReadSheet(ExcelBuffer,ExcelFile,SheetNameTok);
      ExcelBuffer.TESTFIELD("Cell Value as Text",ExpectedResult);
      FileManagement.DeleteServerFile(ExcelFile);
    END;

    [Test]
    PROCEDURE SaveAndLoadCellComment@41();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      WorksheetReader@1003 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      WorkbookReader@1004 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      ExcelFilePath@1001 : Text;
      ExpectedResult@1002 : ARRAY [2] OF Text;
      Index@1006 : Integer;
    BEGIN
      // [SCENARIO 274548] Stan can see cell's comment when export excel buffer to excel

      // [GIVEN] Excel buffer with two entries.
      // [GIVEN] First entry's comment = 'Hello'
      // [GIVEN] Second entry's comment = ' Stan!'
      FOR Index := 1 TO 2 DO BEGIN
        TempExcelBuffer.INIT;
        TempExcelBuffer.VALIDATE("Row No.",Index);
        TempExcelBuffer.VALIDATE("Column No.",Index);
        TempExcelBuffer."Cell Value as Text" := LibraryUtility.GenerateGUID;
        ExpectedResult[Index] := LibraryUtility.GenerateGUID;
        TempExcelBuffer.Comment := COPYSTR(ExpectedResult[Index],1,MAXSTRLEN(TempExcelBuffer.Comment));
        TempExcelBuffer.INSERT;
      END;

      // [WHEN] Export excel buffer to excel
      ExcelFilePath := DumpDataToExcelFile(TempExcelBuffer,SheetNameTok,'');

      WorkbookReader := WorkbookReader.Open(ExcelFilePath);
      WorksheetReader := WorkbookReader.GetWorksheetByName(SheetNameTok);
      // remove author information
      WorksheetReader.Worksheet.WorksheetPart.WorksheetCommentsPart.Comments.FirstChild.Remove;

      // [THEN] Worksheet/WorksheetPart/WorksheetCommentsPart/Comments/InnerText = "Hello Stan!"
      // OpenXml path: Worksheet/WorksheetPart/WorksheetCommentsPart/Comments/Comment[i]/CommentText/Run/SpreadsheetText/InnerText
      Assert.AreEqual(
        ExpectedResult[1] + ExpectedResult[2],
        WorksheetReader.Worksheet.WorksheetPart.WorksheetCommentsPart.Comments.InnerText,
        '');

      WorkbookReader.Close;
      FileManagement.DeleteServerFile(ExcelFilePath);
    END;

    LOCAL PROCEDURE CreateExcelFile@4(VAR ExcelBuffer@1000 : Record 370;SheetName@1002 : Text) : Text;
    VAR
      variant@1001 : Variant;
    BEGIN
      ExcelBuffer.CreateBook('',COPYSTR(SheetName,1,250));
      ExcelBuffer.UTgetGlobalValue('ExcelFile',variant);
      EXIT(FORMAT(variant))
    END;

    LOCAL PROCEDURE DumpDataToExcelFile@18(VAR ExcelBuffer@1000 : Record 370;SheetName@1001 : Text;UserID@1003 : Text) : Text;
    VAR
      ExcelFile@1002 : Text;
    BEGIN
      ExcelFile := CreateExcelFile(ExcelBuffer,SheetName);
      ExcelBuffer.SetUseInfoSheet;
      ExcelBuffer.WriteSheet('','',UserID);
      ExcelBuffer.CloseBook;
      EXIT(ExcelFile);
    END;

    LOCAL PROCEDURE PopulateTableWithNumbers@3(VAR ExcelBuffer@1000 : Record 370);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;

      ExcelBuffer.NewRow;
      PopulateRowWithNumbers(ExcelBuffer,12,0);
      ExcelBuffer.NewRow;
      PopulateRowWithNumbers(ExcelBuffer,12,2);
      PopulateRowWithNumbers(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
      ExcelBuffer.NewRow;
      PopulateRowWithNumbers(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
    END;

    LOCAL PROCEDURE PopulateTableWithTexts@15(VAR ExcelBuffer@1000 : Record 370);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;

      ExcelBuffer.NewRow;
      PopulateRowWithTexts(ExcelBuffer,12,0);
      ExcelBuffer.NewRow;
      PopulateRowWithTexts(ExcelBuffer,12,2);
      PopulateRowWithTexts(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
      ExcelBuffer.NewRow;
      PopulateRowWithTexts(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
    END;

    LOCAL PROCEDURE PopulateTableWithTextsAndInfo@38(VAR ExcelBuffer@1000 : Record 370);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;

      ExcelBuffer.NewRow;
      PopulateRowWithInfo(ExcelBuffer,12);
      ExcelBuffer.NewRow;
      PopulateRowWithNumbers(ExcelBuffer,12,2);
      ExcelBuffer.NewRow;
    END;

    LOCAL PROCEDURE PopulateTableWithDates@16(VAR ExcelBuffer@1000 : Record 370);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;

      ExcelBuffer.NewRow;
      PopulateRowWithDates(ExcelBuffer,12,0);
      ExcelBuffer.NewRow;
      PopulateRowWithDates(ExcelBuffer,12,2);
      PopulateRowWithDates(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
      ExcelBuffer.NewRow;
      PopulateRowWithDates(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
    END;

    LOCAL PROCEDURE PopulateTableWithMixAndStyling@17(VAR ExcelBuffer@1000 : Record 370);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;

      ExcelBuffer.NewRow;
      PopulateRowWithMixAndStyling(ExcelBuffer,12,0);
      ExcelBuffer.NewRow;
      PopulateRowWithMixAndStyling(ExcelBuffer,12,2);
      PopulateRowWithMixAndStyling(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
      ExcelBuffer.NewRow;
      PopulateRowWithMixAndStyling(ExcelBuffer,12,3);
      ExcelBuffer.NewRow;
    END;

    LOCAL PROCEDURE PopulateRowWithNumbers@5(VAR ExcelBuffer@1003 : Record 370;MaxCellNo@1000 : Integer;SkipEvery@1001 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      ExcelBuffer.NewRow;
      FOR  i := 1 TO MaxCellNo DO
        IF SkipEvery = 0 THEN
          ExcelBuffer.AddColumn(10000.1234 + i,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number)
        ELSE
          IF (i MOD SkipEvery) > 0 THEN
            ExcelBuffer.AddColumn(10000.1234 + i,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number)
    END;

    LOCAL PROCEDURE PopulateRowWithTexts@9(VAR ExcelBuffer@1003 : Record 370;MaxCellNo@1000 : Integer;SkipEvery@1001 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      ExcelBuffer.NewRow;
      FOR  i := 1 TO MaxCellNo DO
        IF SkipEvery = 0 THEN
          ExcelBuffer.AddColumn('Text' + FORMAT(i),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
        ELSE
          IF (i MOD SkipEvery) > 0 THEN
            ExcelBuffer.AddColumn('Text' + FORMAT(i),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
    END;

    LOCAL PROCEDURE PopulateRowWithInfo@31(VAR ExcelBuffer@1003 : Record 370;MaxCellNo@1000 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      ExcelBuffer.NewRow;
      FOR  i := 1 TO MaxCellNo DO
        ExcelBuffer.AddInfoColumn('Text' + FORMAT(i),FALSE,TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
    END;

    LOCAL PROCEDURE PopulateRowWithDates@10(VAR ExcelBuffer@1003 : Record 370;MaxCellNo@1000 : Integer;SkipEvery@1001 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      ExcelBuffer.NewRow;
      FOR  i := 1 TO MaxCellNo DO
        IF SkipEvery = 0 THEN
          ExcelBuffer.AddColumn(DMY2DATE(24,12,1900 + i),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date)
        ELSE
          IF (i MOD SkipEvery) > 0 THEN
            ExcelBuffer.AddColumn(DMY2DATE(24,12,1900 + i),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date)
    END;

    LOCAL PROCEDURE PopulateRowWithMixAndStyling@11(VAR ExcelBuffer@1003 : Record 370;MaxCellNo@1000 : Integer;SkipEvery@1001 : Integer);
    VAR
      NumberStyles@1006 : ARRAY [12] OF Text[30];
      DateStyles@1004 : ARRAY [12] OF Text[30];
      i@1002 : Integer;
    BEGIN
      Assert.IsTrue(MaxCellNo <= 12,'MaxCellNo should be less or equal to 12');
      ExcelBuffer.NewRow;
      NumberStyles[1] := '0';
      NumberStyles[2] := '0.00';
      NumberStyles[3] := '#,##0';
      NumberStyles[4] := '#,##0.00';
      NumberStyles[5] := '0%';
      NumberStyles[6] := '0.00%';
      NumberStyles[7] := '#,##0.00;[Red](#,##0.00)';
      NumberStyles[8] := '0_);(0)';   // Custom Style
      NumberStyles[9] := '#,##0.00%'; // Custom Style
      NumberStyles[10] := '#,##0%';   // Custom Style
      NumberStyles[11] := '0.0%';     // Custom Style
      NumberStyles[12] := '#,##0.00;(#,##0.00)';

      DateStyles[1] := 'mm-dd-yy';
      DateStyles[2] := 'd-mmm-yy';
      DateStyles[3] := 'd-mmm';
      DateStyles[4] := 'm/d/yyyy';       // Custom Style
      DateStyles[5] := 'm/d/yy';            // Custom Style
      DateStyles[6] := '[$-F800]dddd, mmmm dd, yyyy';   // Custom Style
      DateStyles[7] := '[$-409]d-mmm-yy';    // Custom Style
      DateStyles[8] := '[$-409]d-mmm';    // Custom Style
      DateStyles[9] := '[$-409]mmmm d, yyyy';    // Custom Style
      DateStyles[10] := '[$-409]m/d/yy';    // Custom Style
      DateStyles[11] := 'm/d/yyyy'; // Custom Style
      DateStyles[12] := 'm/d/yy';  // Custom Style

      FOR  i := 1 TO MaxCellNo DO
        IF SkipEvery = 0 THEN
          ExcelBuffer.AddColumn(10000.1234 + i,FALSE,'',TRUE,TRUE,TRUE,NumberStyles[i],ExcelBuffer."Cell Type"::Number)
        ELSE
          IF (i MOD SkipEvery) > 0 THEN
            ExcelBuffer.AddColumn(DMY2DATE(24,12,1900 + i),FALSE,'',TRUE,TRUE,TRUE,DateStyles[i],ExcelBuffer."Cell Type"::Date)
    END;

    LOCAL PROCEDURE InsertColumn@19(VAR ExcelBuffer@1000 : Record 370;RowNo@1001 : Integer;ColumnNo@1002 : Integer;Value@1003 : Variant;CellType@1004 : Option);
    BEGIN
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer.VALIDATE("Cell Value as Text",FORMAT(Value));
      ExcelBuffer.VALIDATE("Cell Type",CellType);
      ExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE ReadSheet@7(VAR ExcelBuffer@1002 : Record 370;ExcelFile@1000 : Text;SheetName@1001 : Text);
    BEGIN
      CLEAR(ExcelBuffer);
      ExcelBuffer.DELETEALL;
      ExcelBuffer.OpenBook(ExcelFile,COPYSTR(SheetName,1,250));
      ExcelBuffer.ReadSheet;
    END;

    LOCAL PROCEDURE ValidateExcelFile@39(VAR WriteExcelBuffer@1007 : Record 370;ExcelFile@1001 : Text;SheetName@1004 : Text);
    VAR
      TempReadExcelBuffer@1005 : TEMPORARY Record 370;
      ValueNumber@1003 : Decimal;
    BEGIN
      ReadSheet(TempReadExcelBuffer,ExcelFile,SheetName);
      TempReadExcelBuffer.CloseBook;

      Assert.AreEqual(WriteExcelBuffer.COUNT,TempReadExcelBuffer.COUNT,'Both tables should have the same count');

      WriteExcelBuffer.FINDFIRST;
      TempReadExcelBuffer.FINDFIRST;
      REPEAT
        Assert.AreEqual(WriteExcelBuffer."Row No.",TempReadExcelBuffer."Row No.",'Both Tables should point to the same row');
        Assert.AreEqual(WriteExcelBuffer."Column No.",TempReadExcelBuffer."Column No.",'Both Tables should point to the same column');
        Assert.AreEqual(WriteExcelBuffer."Cell Type",TempReadExcelBuffer."Cell Type",'Both Tables should point to the same Cell Type');

        IF WriteExcelBuffer."Cell Type" = WriteExcelBuffer."Cell Type"::Number THEN BEGIN
          EVALUATE(ValueNumber,TempReadExcelBuffer."Cell Value as Text");
          Assert.AreEqual(WriteExcelBuffer."Cell Value as Text",FORMAT(ValueNumber),'Both Tables should point to the same value');
        END ELSE
          Assert.AreEqual(
            WriteExcelBuffer."Cell Value as Text",TempReadExcelBuffer."Cell Value as Text",
            'Both Tables should point to the same value');

        Assert.AreEqual(
          GetCellNumberFormat(WriteExcelBuffer),TempReadExcelBuffer.NumberFormat,'Both Tables should point to the same NumberFormat');

      UNTIL (WriteExcelBuffer.NEXT = 0) AND (TempReadExcelBuffer.NEXT = 0);
    END;

    LOCAL PROCEDURE GetCellNumberFormat@8(VAR ExcelBuffer@1000 : Record 370) : Text;
    BEGIN
      CASE ExcelBuffer."Cell Type" OF
        ExcelBuffer."Cell Type"::Number:
          EXIT(ExcelBuffer.NumberFormat);
        ExcelBuffer."Cell Type"::Date:
          BEGIN
            IF ExcelBuffer.NumberFormat = '' THEN
              EXIT('mm-dd-yy');

            EXIT(ExcelBuffer.NumberFormat);
          END;
        ExcelBuffer."Cell Type"::Text:
          BEGIN
            IF ExcelBuffer.NumberFormat = '' THEN
              EXIT('@');

            EXIT(ExcelBuffer.NumberFormat);
          END;
        ExcelBuffer."Cell Type"::Time:
          BEGIN
            IF ExcelBuffer.NumberFormat = '' THEN
              EXIT('h:mm:ss');

            EXIT(ExcelBuffer.NumberFormat);
          END;
      END;

      ERROR(UnknownCellTypeError,FORMAT(ExcelBuffer."Cell Type"))
    END;

    [ModalPageHandler]
    PROCEDURE SelectSheetMPH@50(VAR NameValueLookupPage@1000 : TestPage 823);
    BEGIN
      NameValueLookupPage.NEXT;
      NameValueLookupPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateExcelStream@46(VAR ExcelStream@1000 : InStream);
    VAR
      TempExcelBuffer@1001 : TEMPORARY Record 370;
      FileName@1002 : Text;
    BEGIN
      FileName := CreateExcelFile(TempExcelBuffer,SheetNameTok);
      PopulateRowWithTexts(TempExcelBuffer,5,0);
      PopulateRowWithTexts(TempExcelBuffer,5,0);
      PopulateRowWithTexts(TempExcelBuffer,5,0);
      TempExcelBuffer.WriteSheet('','','');
      TempExcelBuffer.QuitExcel;

      ExcelFile.OPEN(FileName);
      ExcelFile.CREATEINSTREAM(ExcelStream);
    END;

    BEGIN
    END.
  }
}

