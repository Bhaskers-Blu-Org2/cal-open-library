OBJECT Codeunit 146025 Test Add Text Line Encoding
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=Test,W1,All;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=Disabled;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EncodeText@1000 : TextConst 'KOR=가나다라마바사아자차카타파하';
      Assert@1001 : Codeunit 130000;
      StreamReader@1005 : DotNet "'mscorlib'.System.IO.StreamReader";
      LStreamReader@1004 : DotNet "'mscorlib'.System.IO.StreamReader";

    [Test]
    PROCEDURE TestAddTextLineWithEncoding@3();
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      LocalBlob@1005 : TEMPORARY Record 99008535;
      OutStream@1001 : OutStream;
      InStream@1002 : InStream;
      LocalInStream@1007 : InStream;
      StreamWriter@1004 : Codeunit 3025;
      LocalOutStream@1003 : OutStream;
    BEGIN
      // [SCENARIO] Unit test of StreamWriter

      // [GIVEN] An encoded string in a blob.
      TempBlob.INIT;
      TempBlob.INSERT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      AddTextLineWithEncoding(OutStream,EncodeText,949);
      TempBlob.MODIFY;
      TempBlob.CALCFIELDS(Blob);

      // [GIVEN] An non-encoded string in a blob.
      LocalBlob.INIT;
      LocalBlob.INSERT;
      LocalBlob.Blob.CREATEOUTSTREAM(LocalOutStream);
      AddTextLineWithoutEncoding(LocalOutStream,EncodeText);
      LocalBlob.MODIFY;
      LocalBlob.CALCFIELDS(Blob);

      // [WHEN] Those strings are compared.
      TempBlob.Blob.CREATEINSTREAM(InStream);
      LocalBlob.Blob.CREATEINSTREAM(LocalInStream);

      // [THEN] They are not equal.
      Assert.AreNotEqual(ReadTextLineFromStream(InStream),ReadTextLineFromStream(LocalInStream),'Text should be not equal');
    END;

    [Normal]
    LOCAL PROCEDURE AddTextLineWithoutEncoding@10(VAR OutStream@1000 : OutStream;LineText@1001 : Text);
    VAR
      DotNetStreamWriter@1002 : DotNet "'mscorlib'.System.IO.StreamWriter";
    BEGIN
      DotNetStreamWriter := DotNetStreamWriter.StreamWriter(OutStream);
      DotNetStreamWriter.WriteLine(LineText);
      DotNetStreamWriter.Flush;
      DotNetStreamWriter.Close;
      DotNetStreamWriter.Dispose;
    END;

    [Normal]
    LOCAL PROCEDURE AddTextLineWithEncoding@1(VAR OutStream@1000 : OutStream;LineText@1001 : Text;CodePage@1003 : Integer);
    VAR
      DotNet_StreamWriter@1002 : Codeunit 3025;
      DotNet_Encoding@1004 : Codeunit 3026;
    BEGIN
      DotNet_Encoding.Encoding(949);
      DotNet_StreamWriter.StreamWriter(OutStream,DotNet_Encoding);
      DotNet_StreamWriter.WriteLine(LineText);
      DotNet_StreamWriter.Flush;
      DotNet_StreamWriter.Close;
      DotNet_StreamWriter.Dispose;
    END;

    [Normal]
    LOCAL PROCEDURE ReadTextLineFromStream@34(VAR InStream@1000 : InStream) retValue : Text;
    VAR
      result@1001 : Text;
    BEGIN
      StreamReader := StreamReader.StreamReader(InStream);
      result := StreamReader.ReadLine();
      StreamReader.Close;
      StreamReader.Dispose;
      EXIT(result);
    END;

    BEGIN
    END.
  }
}

