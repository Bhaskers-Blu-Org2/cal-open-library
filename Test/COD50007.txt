OBJECT Codeunit 50007 Test_DotNet_GzipStream
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryLowerPermissions@1001 : Codeunit 132217;
      DotNet_GzipStream@1002 : Codeunit 50006;
      GZipStreamHelper@1003 : Codeunit 50017;

    [Test]
    PROCEDURE SampleDataCompression@1();
    VAR
      SourceTempBlob@1000 : TEMPORARY Record 99008535;
      DestTempBlob@1001 : TEMPORARY Record 99008535;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      CLEAR(DotNet_GzipStream);
      // [Given] Uncompressed data is 'TestData'
      SourceTempBlob.WriteAsText('TestData', TEXTENCODING::UTF8);
      // [WHEN] Gzip Compression completes
      GZipStreamHelper.InitGzipStreamFromTempBlob(DestTempBlob, TRUE, DotNet_GzipStream);
      GZipStreamHelper.ReadFromTempBlob(DotNet_GzipStream, SourceTempBlob);
      DotNet_GzipStream.Close;
      DotNet_GzipStream.Dispose;
      // [THEN] Compressed data as Base64 should be 'H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA=='
      Assert.AreEqual('H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA==', DestTempBlob.ToBase64String, 'Compression fails');
    END;

    [Test]
    PROCEDURE SampleDataDecompression@2();
    VAR
      SourceTempBlob@1000 : TEMPORARY Record 99008535;
      DestTempBlob@1001 : TEMPORARY Record 99008535;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      CLEAR(DotNet_GzipStream);
      // [Given] Compressed data (as Base64) is 'H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA=='
      SourceTempBlob.FromBase64String('H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA==');
      // [WHEN] Gzip Decompression completes
      GZipStreamHelper.InitGzipStreamFromTempBlob(SourceTempBlob, FALSE, DotNet_GzipStream);
      GZipStreamHelper.WriteToTempBlob(DotNet_GzipStream, DestTempBlob);
      DotNet_GzipStream.Close;
      DotNet_GzipStream.Dispose;
      // [THEN] Decompressed data should be 'TestData'
      Assert.AreEqual('TestData', DestTempBlob.ReadAsTextWithCRLFLineSeparator, 'Decompression fails');
    END;

    [Test]
    PROCEDURE SampleDataCompressionDecompression@3();
    VAR
      SourceTempBlob@1000 : TEMPORARY Record 99008535;
      DestTempBlob@1001 : TEMPORARY Record 99008535;
      IntermTempBlob@1002 : TEMPORARY Record 99008535;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      CLEAR(DotNet_GzipStream);
      // [Given] Uncompressed data is 'TestData'
      SourceTempBlob.WriteAsText('TestData', TEXTENCODING::UTF8);
      // [WHEN] Gzip Compression completes
      GZipStreamHelper.InitGzipStreamFromTempBlob(IntermTempBlob, TRUE, DotNet_GzipStream);
      GZipStreamHelper.ReadFromTempBlob(DotNet_GzipStream, SourceTempBlob);
      DotNet_GzipStream.Close;
      DotNet_GzipStream.Dispose;
      // [WHEN] And Gzip Decompression from the same stream completes
      CLEAR(DotNet_GzipStream);
      GZipStreamHelper.InitGzipStreamFromTempBlob(IntermTempBlob, FALSE, DotNet_GzipStream);
      CLEAR(DestTempBlob.Blob);
      GZipStreamHelper.WriteToTempBlob(DotNet_GzipStream, DestTempBlob);
      DotNet_GzipStream.Close;
      DotNet_GzipStream.Dispose;
      // [THEN] Result must be the same string
      Assert.AreEqual('TestData', DestTempBlob.ReadAsTextWithCRLFLineSeparator, 'Compression/Decompression fails');
    END;

    [Test]
    PROCEDURE SampleDataDecompressionUsingMemoryStream@4();
    VAR
      SourceTempBlob@1000 : TEMPORARY Record 99008535;
      DestTempBlob@1001 : TEMPORARY Record 99008535;
      DotNet_MemoryStream@1002 : Codeunit 3009;
      DataStream@1003 : InStream;
      DotNet_Stream@1004 : Codeunit 50122;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      CLEAR(DotNet_GzipStream);
      // [Given] Compressed data (as Base64) is 'H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA=='
      SourceTempBlob.FromBase64String('H4sIAAAAAAAEAAtJLS5xSSxJBAA2+6HACAAAAA==');
      // [WHEN] Gzip Decompression completes
      SourceTempBlob.Blob.CREATEINSTREAM(DataStream);
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.CopyToInStream(DataStream);
      DotNet_MemoryStream.SetPosition(0);
      DotNet_MemoryStream.CastToStream(DotNet_Stream);
      DotNet_GzipStream.GZipStream(DotNet_Stream, FALSE);
      GZipStreamHelper.WriteToTempBlob(DotNet_GzipStream, DestTempBlob);
      DotNet_GzipStream.Close;
      DotNet_GzipStream.Dispose;
      // [THEN] Decompressed data should be 'TestData'
      Assert.AreEqual('TestData', DestTempBlob.ReadAsTextWithCRLFLineSeparator, 'Decompression fails');
    END;

    BEGIN
    END.
  }
}

